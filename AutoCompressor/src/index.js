import fs from "fs";
import { readdir, stat } from "fs/promises";
import path from "path";
import zlib from "zlib";
import readline from "readline";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: "AutoCompressor> ",
});

console.log("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ./src/test-folder)");
rl.prompt();

rl.on("line", async (input) => {
  const folderPath = input.trim();

  if (!folderPath) {
    rl.close();
    return;
  }

  console.log(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: ${folderPath}\n`);

  try {
    const files = await getAllFiles(folderPath);

    for (const file of files) {
      await compressFile(file);
    }

    console.log("üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!\n");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err.message);
  }

  rl.prompt();
});

rl.on("close", () => {
  console.log("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
});

// ===== –§–£–ù–ö–¶–ò–ò =====

async function getAllFiles(dir) {
  const entries = await readdir(dir, { withFileTypes: true });

  const files = await Promise.all(
    entries.map(async (entry) => {
      const fullPath = path.join(dir, entry.name);
      if (entry.isDirectory()) {
        return await getAllFiles(fullPath);
      } else {
        return fullPath;
      }
    })
  );

  return files.flat();
}

async function compressFile(filePath) {
  if (filePath.endsWith(".gz")) return;

  const gzFilePath = filePath + ".gz";

  try {
    const fileStat = await stat(filePath);
    let gzStat = null;

    try {
      gzStat = await stat(gzFilePath);
    } catch {
      // gz-—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    let needCompress = false;

    if (!gzStat) {
      console.log(`üÜï –ê—Ä—Ö–∏–≤ ${gzFilePath} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è...`);
      needCompress = true;
    } else if (fileStat.mtimeMs > gzStat.mtimeMs) {
      console.log(`üîÅ –ê—Ä—Ö–∏–≤ ${gzFilePath} —É—Å—Ç–∞—Ä–µ–ª ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç—Å—è...`);
      needCompress = true;
    } else {
      console.log(`‚úÖ –ê—Ä—Ö–∏–≤ ${gzFilePath} –∞–∫—Ç—É–∞–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫.`);
    }

    if (needCompress) {
      await new Promise((resolve, reject) => {
        const readStream = fs.createReadStream(filePath);
        const writeStream = fs.createWriteStream(gzFilePath);
        const gzip = zlib.createGzip();

        console.log(`üì¶ –ù–∞—á–∞—Ç–æ —Å–∂–∞—Ç–∏–µ: ${filePath} ‚Üí ${gzFilePath}`);

        readStream
          .pipe(gzip)
          .pipe(writeStream)
          .on("finish", () => {
            console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${gzFilePath}\n`);
            resolve();
          })
          .on("error", (err) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ ${filePath}:`, err.message);
            reject(err);
          });
      });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, err.message);
  }
}
